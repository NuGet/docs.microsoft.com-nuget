### YamlMime:FAQ
metadata:
  title: NuGet Frequently-Asked Questions
  description: Common questions and answers for using NuGet on the command line and in Visual Studio
  author: shishirx34
  ms.author: shishirh
  ms.date: 01/31/2022
  ms.topic: conceptual
    
title: NuGet frequently-asked questions
summary: |
  For frequently-asked questions pertaining to NuGet.org, such as NuGet.org account questions, see [NuGet.org frequently-asked questions](../nuget-org/nuget-org-faq.yml).
  

sections:
  - name: General
    questions:
      - question: |
          What is required to run NuGet?
        answer: |
          All the information around both UI and command-line tools is available in the [Install guide](../install-nuget-client-tools.md).
          
      - question: |
          Does NuGet support Mono?
        answer: |
          The command-line tool, `nuget.exe`, builds and runs under Mono 3.2+ and can create packages in Mono.
          
          Although `nuget.exe` works fully on Windows, there are known issues on Linux and OS X. Refer to [Mono issues](https://github.com/NuGet/Home/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+mono) on GitHub.
          
          A [graphical client](https://github.com/mrward/monodevelop-nuget-addin) is available as an add-in for MonoDevelop.
          
      - question: |
          How can I determine what a package contains and whether it's stable and useful for my application?
        answer: |
          The primary source for learning about a package is its listing page on nuget.org (or another private feed). Each package page on nuget.org includes a description of the package, its version history, and usage statistics. The **Info** section on the package page also contains a link to the project's web site where you typically find many examples and other documentation to help you learn how the package is used.
          
          For more information, see [Finding and choosing packages](../consume-packages/finding-and-choosing-packages.md).
          
  - name: NuGet in Visual Studio
    questions:
      - question: |
          How is NuGet supported in different Visual Studio products?
        answer: |
          - Visual Studio on Windows supports the [Package Manager UI](../consume-packages/install-use-packages-visual-studio.md) and the [Package Manager Console](../consume-packages/install-use-packages-powershell.md).
          - Visual Studio for Mac has built-in NuGet capabilities as described on [Including a NuGet package in your project](/visualstudio/mac/nuget-walkthrough).
          - Visual Studio Code (all platforms) does not have any direct NuGet integration. Use the [NuGet CLI](../reference/nuget-exe-cli-reference.md) or the [dotnet CLI](../reference/dotnet-commands.md).
          - Azure DevOps provides [a build step to restore NuGet packages](/vsts/build-release/tasks/package/nuget). You can also [host private NuGet package feeds on Azure DevOps](/azure/devops/artifacts/nuget/publish).
          
      - question: |
          How do I check the exact version of the NuGet tools that are installed?
        answer: |
          In Visual Studio, use the **Help > About Microsoft Visual Studio** command and look at the version displayed next to **NuGet Package Manager**.
          
          Alternatively, launch the Package Manager Console (**Tools > NuGet Package Manager > Package Manager Console**) and enter `$host` to see information about NuGet including the version.
          
      - question: |
          What programming languages are supported by NuGet?
        answer: |
          NuGet generally works for .NET languages and is designed to bring .NET libraries into a project. Because it also supports MSBuild and Visual Studio automation in some project types, it also supports other projects and languages to various degrees.
          
          The most recent version of NuGet supports C#, Visual Basic, F#, WiX, C++, and Q#.
          
      - question: |
          What project templates are supported by NuGet?
        answer: |
          NuGet has full support for a variety of project templates like Windows, Web, Cloud, SharePoint, Wix, and so on.

      - question: |
          How do I update packages that are part of Visual Studio templates?
        answer: |
          Go to the **Updates** tab in the Package Manager UI and select **Update All**, or use the [`Update-Package` command](../reference/ps-reference/ps-ref-update-package.md) from the Package Manager Console.
          
          To update the template itself, you need to manually update the template repository. See [Xavier Decoster's blog](http://www.xavierdecoster.com/update-project-template-to-latest-nuget-packages) on this subject. Note that this is done at your own risk, because manual updates might corrupt the template if the latest version of all dependencies are not compatible with each other.
          
      - question: |
          Can I use NuGet outside of Visual Studio?
        answer: |
          Yes, NuGet works directly from the command line. See the [Install guide](../install-nuget-client-tools.md) and the [CLI reference](../reference/nuget-exe-cli-reference.md).
          
  - name: NuGet command line
    questions:
      - question: |
          How do I get the latest version of NuGet command line tool?
        answer: |
          See the [Install guide](../install-nuget-client-tools.md). To check the current installed version of the tool, use `nuget help`.
          
      - question: |
          What is the license for nuget.exe?
        answer: |
          You are allowed to redistribute nuget.exe under the terms of the MIT license. You are responsible for updating and servicing any copies of nuget.exe that you choose to redistribute.

      - question: |
          Is it possible to extend the NuGet command line tool?
        answer: |
          Yes, it's possible to add custom commands to `nuget.exe`, as described in [Rob Reynold's post](https://web.archive.org/web/20200814172907/http://geekswithblogs.net/robz/archive/2011/07/15/extend-nuget-command-line.aspx) available via Archive.org.
          
  - name: NuGet Package Manager Console (Visual Studio on Windows)
    questions:
      - question: |
          How do I get access to the DTE object in the Package Manager console?
        answer: |
          The top-level object in the Visual Studio automation object model is called the DTE (Development Tools Environment) object. The console provides this through a variable named `$DTE`. For more information, see [Automation Model Overview](/visualstudio/extensibility/internals/automation-model-overview) in the Visual Studio Extensibility documentation.
          
      - question: |
          I try to cast the $DTE variable to the type DTE2, but I get an error: Cannot convert the "EnvDTE.DTEClass" value of type "EnvDTE.DTEClass" to type "EnvDTE80.DTE2". What's wrong?
        answer: |
          This is a known issue with how PowerShell interacts with a COM object. Try the following:
          
          ```ps
          `$dte2 = Get-Interface $dte ([EnvDTE80.DTE2])`
          ```
          
          `Get-Interface` is a helper function added by the NuGet PowerShell host.
          
  - name: Creating and publishing packages
    questions:
      - question: |
          How do I list my package in a feed?
        answer: |
          See [Creating and publishing a package](../quickstart/create-and-publish-a-package-using-visual-studio.md).
          
      - question: |
          I have multiple versions of my library that target different versions of the .NET Framework. How do I build a single package that supports this?
        answer: |
          See [Supporting Multiple .NET Framework Versions and Profiles](../create-packages/supporting-multiple-target-frameworks.md).
          
      - question: |
          How do I set up my own repository or feed?
        answer: |
          See the [Hosting packages overview](../hosting-packages/overview.md).
          
      - question: |
          How can I upload packages to my NuGet feed in bulk?
        answer: |
          See [Bulk publishing NuGet packages](http://jeffhandley.com/archive/2012/12/13/Bulk-Publishing-NuGet-Packages.aspx) (jeffhandly.com).
          
  - name: Working with packages
    questions:
      - question: |
          Is it possible to install NuGet packages without Internet connectivity?
        answer: |
          Yes, see Scott Hanselman's Blog post [How to access NuGet when nuget.org is down (or you're on a plane)](http://www.hanselman.com/blog/HowToAccessNuGetWhenNuGetorgIsDownOrYoureOnAPlane.aspx) (hanselman.com).
          
      - question: |
          How do I install packages in a different location from the default packages folder?
        answer: |
          Set the [`repositoryPath`](../reference/nuget-config-file.md#config-section) setting in `Nuget.Config` using `nuget config -set repositoryPath=<path>`.
          
      - question: |
          How do I avoid adding the NuGet packages folder into to source control?
        answer: |
          Set the [`disableSourceControlIntegration`](../reference/nuget-config-file.md#solution-section) in `Nuget.Config` to `true`. This key works at the solution level and hence need to be added to the `$(Solutiondir)\.nuget\Nuget.Config` file. Enabling package restore from Visual Studio creates this file automatically.
          
      - question: |
          How do I turn off package restore?
        answer: |
          See [Enabling and disabling package restore](../consume-packages/package-restore.md#enable-and-disable-package-restore-in-visual-studio).
          
      - question: |
          Why do I get an "Unable to resolve dependency error" when installing a local package with remote dependencies?
        answer: |
          You need to select the **All** source when installing a local package into the project. This aggregates all the feeds instead of using just one. The reason this error appears is that users of a local repository often want to avoid accidentally installing a remote package due to corporate polices.

      - question: |
          I have multiple projects in the same folder, how can I use separate packages.config files for each project?
        answer: |
          In most projects where separate projects live in separate folders, this is not a problem as NuGet identifies the `packages.config` files in each project. With NuGet 3.3+ and multiple projects in the same folder, you can insert the name of the project into the `packages.config` filenames use the pattern `packages.{project-name}.config`, and NuGet uses that file.
          
          This is not an issue when using PackageReference, as each project file contains its own list of dependencies.
          
      - question: |
          I don't see nuget.org in my list of repositories, how do I get it back?
        answer: |
          - Add `https://api.nuget.org/v3/index.json` to your list of sources, or
          - Delete `%appdata%\.nuget\NuGet.Config` (Windows) or `~/.nuget/NuGet/NuGet.Config` (Mac/Linux) and let NuGet re-create it.
          
      - question: |
          I migrated to PackageReference, why is my build failing `This project references NuGet package(s) that are missing on this computer.`?
        answer: |
          In packages.config projects, when a package with `build` props or targets was installed, NuGet would add an `EnsureNuGetPackageBuildImports` target to verify that the packages msbuild content has been imported before building.
          If the `target` has been modified manually, NuGet might not be able to detect that it needs removed when migrating.
          
          If your project is `PackageReference` and you still have this target in project file, it should be safe to remove.
